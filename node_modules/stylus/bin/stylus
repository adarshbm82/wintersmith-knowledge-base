#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , basename = require('path').basename;

try {
  var stylus = require('stylus');
} catch (err) {
  var stylus = require('../lib/stylus');
}

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Compare flag.
 */

var compare = false;

/**
 * Compress flag.
 */

var compress = false;

/**
 * CSS conversion flag.
 */

var convertCSS = false;

/**
 * Files to processes.
 */

var files = [];

/**
 * Destination directory.
 */

var dest;

/**
 * Watcher hash.
 */

var watchers;

/**
 * Usage docs.
 */

var usage = [
    ''
  , '  Usage: stylus [options] [command] [< in [> out]]'
  , '                [file|dir ...]'
  , ''
  , '  Commands:'
  , ''
  , '    help <prop>     Opens help info for <prop> in'
  , '                    your default browser. (osx only)'
  , ''
  , '  Options:'
  , ''
  , '    -w, --watch      Watch file(s) for changes and re-compile'
  , '    -o, --out <dir>  Output to <dir> when passing files'
  , '    -c, --css        Convert css input to stylus'
  , '    -C, --compress   Compress css output'
  , '    -d, --compare    Display input along with output'
  , '    -V, --version    Display the version of stylus'
  , '    -h, --help       Display help information'
  , ''
].join('\n');

/**
 * Handle arguments.
 */

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      console.log(usage);
      process.exit(1);
    case '-d':
    case '--compare':
      compare = true;
      break;
    case '-C':
    case '--compress':
      compress = true;
      break;
    case '-c':
    case '--css':
      convertCSS = true;
      break;
    case '-V':
    case '--version':
      console.log(stylus.version);
      process.exit(0);
      break;
    case '-o':
    case '--out':
      dest = args.shift();
      if (!dest) throw new Error('--out <dir> required');
      break;
    case 'help':
      var name = args.shift();
      if (!name) throw new Error('help <property> required');
      help(name);
      break;
    case '-w':
    case '--watch':
      watchers = {};
      break;
    default:
      files.push(arg);
  }
}

/**
 * Open the default browser to the CSS property `name`.
 *
 * @param {String} name
 */

function help(name) {
  var url = 'https://developer.mozilla.org/en/CSS/' + name
    , exec = require('child_process').exec;
  exec('open "' + url + '"', function(){
    process.exit(0);
  });
}

// Compilation options

var options = {
    filename: 'stdin'
  , compress: compress
  , paths: [process.cwd()]
};

// Buffer stdin

var str = '';

// Convert css to stylus

if (convertCSS) {
  var stdin = process.openStdin();
  stdin.setEncoding('utf8');
  stdin.on('data', function(chunk){ str += chunk; });
  stdin.on('end', function(){
    var out = stylus.convertCSS(str);
    console.log(out);
  });
} else {
  if (files.length) {
    compileFiles(files);
  } else {
    compileStdio();
  }
}

/**
 * Compile with stdio.
 */

function compileStdio() {
  var stdin = process.openStdin();
  stdin.setEncoding('utf8');
  stdin.on('data', function(chunk){ str += chunk; });
  stdin.on('end', function(){
    // Compile to css
    stylus(str, options).render(function(err, css){
      if (err) throw err;
      if (compare) {
        console.log('\n\x1b[1mInput:\x1b[0m');
        console.log(str);
        console.log('\n\x1b[1mOutput:\x1b[0m');
      }
      console.log(css);
      if (compare) console.log();
    });
  });
}

/**
 * Compile the given files.
 */

function compileFiles(files) {
  files.forEach(compileFile);
}

/**
 * Compile the given file.
 */

function compileFile(file) {
  fs.lstat(file, function(err, stat){
    if (err) throw err;
    if (stat.isFile()) {
      fs.readFile(file, 'utf8', function(err, str){
        if (err) throw err;
        options.filename = file;
        stylus(str, options).render(function(err, css){
          if (err) throw err;
          writeFile(file, css);
        });
      });
    } else if (stat.isDirectory()) {
      fs.readdir(file, function(err, files){
        if (err) throw err;
        files.filter(function(path){
          return path.match(/\.styl$/);
        }).map(function(path){
          return file + '/' + path;
        }).forEach(compileFile);
      });
    }
  });
}

/**
 * Write the given css output.
 */

function writeFile(file, css) {
  // --out support
  var path = dest
    ? dest + '/' + basename(file, '.styl') + '.css'
    : file.replace('.styl', '.css');
  fs.writeFile(path, css, function(err){
    if (err) throw err;
    console.log('  \033[90mcompiled\033[0m %s', path);
    // --watch support
    if (watchers) {
      if (!watchers[file]) {
        watchers[file] = true;
        fs.watchFile(file, { interval: 50 }, function(curr, prev){
          if (curr.mtime > prev.mtime) {
            compileFile(file);
          }
        });
      }
    }
  });
}